@page "/"
@using WeatherAcquisition.Interfaces.Base.Repositories
@using WeatherAcquisition.Domain.Base
@inject IRepository<DataSourceInfo> _Repository

<h3>Данные</h3>

<button class="btn btn-primary" @onclick="RefreshButton_OnClick">Перезагрузить</button>
@*<button class="btn btn-primary" @onclick="async () => await UpdateSources()">Перезагрузить</button>*@

@if (_Sources is { } sources)
{
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Название</th>
                <th>Описание</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var src in sources)
            {
                <tr>
                    <td>@src.Id</td>
                    <td>@src.Name</td>
                    <td>@src.Description</td>
                    <td>
                        <button class="btn btn-outline-danger" @onclick="() => Remove(src)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Загрузка данных...</p>
}

@code{

    private IList<DataSourceInfo> _Sources;

    private async Task UpdateSources()
    {
        Console.WriteLine("Запрос данных с сервера");
        _Sources = (await _Repository.GetAll()).ToList();
        Console.WriteLine("Запрос данных завершён");
    }

    protected override async Task OnInitializedAsync() => await UpdateSources();

    private async Task RefreshButton_OnClick() => await UpdateSources();

    private async Task Remove(DataSourceInfo Source)
    {
        if (_Sources is not { Count: > 0 }) return;

        var removed = await _Repository.Delete(Source);
        if (removed is not null)
            _Sources.Remove(removed);
    }
}